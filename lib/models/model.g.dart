// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Account.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Account TABLE
class TableAccount extends SqfEntityTableBase {
  TableAccount() {
    // declare properties of EntityTable
    tableName = 'account';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: true),
      SqfEntityFieldBase('email', DbType.text),
      SqfEntityFieldBase('currency', DbType.text,
          defaultValue: 'PHP', isNotNull: true),
      SqfEntityFieldBase('createdAt', DbType.datetime,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('updatedAt', DbType.datetime,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableAccount();
  }
}

// Category TABLE
class TableCategory extends SqfEntityTableBase {
  TableCategory() {
    // declare properties of EntityTable
    tableName = 'category';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: true),
      SqfEntityFieldBase('icon', DbType.text),
      SqfEntityFieldBase('createdAt', DbType.datetime,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('updatedAt', DbType.datetime,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableCategory();
  }
}

// Expense TABLE
class TableExpense extends SqfEntityTableBase {
  TableExpense() {
    // declare properties of EntityTable
    tableName = 'expense';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('description', DbType.text, isNotNull: true),
      SqfEntityFieldBase('amount', DbType.real,
          defaultValue: 0, isNotNull: true),
      SqfEntityFieldBase('paid_at', DbType.date,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('category_id', DbType.integer),
      SqfEntityFieldBase('createdAt', DbType.datetime,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('updatedAt', DbType.datetime,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableExpense();
  }
}

// Income TABLE
class TableIncome extends SqfEntityTableBase {
  TableIncome() {
    // declare properties of EntityTable
    tableName = 'income';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('description', DbType.text, isNotNull: true),
      SqfEntityFieldBase('amount', DbType.real,
          defaultValue: 0, isNotNull: true),
      SqfEntityFieldBase('date', DbType.date,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('createdAt', DbType.datetime,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('updatedAt', DbType.datetime,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableIncome();
  }
}

// Spending_limit TABLE
class TableSpending_limit extends SqfEntityTableBase {
  TableSpending_limit() {
    // declare properties of EntityTable
    tableName = 'spending_limit';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('amount', DbType.real,
          defaultValue: 0, isNotNull: true),
      SqfEntityFieldBase('start_date', DbType.date,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('end_date', DbType.date,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('createdAt', DbType.datetime,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('updatedAt', DbType.datetime,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableSpending_limit();
  }
}

// Transaction TABLE
class TableTransaction extends SqfEntityTableBase {
  TableTransaction() {
    // declare properties of EntityTable
    tableName = 'transactions';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('transaction_id', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('transaction_type', DbType.text, isNotNull: true),
      SqfEntityFieldBase('createdAt', DbType.datetime,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('updatedAt', DbType.datetime,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTransaction();
  }
}
// END TABLES

// BEGIN SEQUENCES
// END SEQUENCES

// BEGIN DATABASE MODEL
class ExpenseDBModel extends SqfEntityModelProvider {
  ExpenseDBModel() {
    databaseName = expenseDBModel.databaseName;
    password = expenseDBModel.password;
    dbVersion = expenseDBModel.dbVersion;
    preSaveAction = expenseDBModel.preSaveAction;
    logFunction = expenseDBModel.logFunction;
    databaseTables = [
      TableAccount.getInstance,
      TableCategory.getInstance,
      TableExpense.getInstance,
      TableIncome.getInstance,
      TableSpending_limit.getInstance,
      TableTransaction.getInstance,
    ];

    bundledDatabasePath = expenseDBModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = expenseDBModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Account
class Account extends TableBase {
  Account(
      {this.id,
      this.name,
      this.email,
      this.currency,
      this.createdAt,
      this.updatedAt}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Account.withFields(
      this.name, this.email, this.currency, this.createdAt, this.updatedAt) {
    _setDefaultValues();
  }
  Account.withId(this.id, this.name, this.email, this.currency, this.createdAt,
      this.updatedAt) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Account.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['email'] != null) {
      email = o['email'].toString();
    }
    if (o['currency'] != null) {
      currency = o['currency'].toString();
    }
    if (o['createdAt'] != null) {
      createdAt = int.tryParse(o['createdAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['createdAt'].toString())!)
          : DateTime.tryParse(o['createdAt'].toString());
    }
    if (o['updatedAt'] != null) {
      updatedAt = int.tryParse(o['updatedAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['updatedAt'].toString())!)
          : DateTime.tryParse(o['updatedAt'].toString());
    }
  }
  // FIELDS (Account)
  int? id;
  String? name;
  String? email;
  String? currency;
  DateTime? createdAt;
  DateTime? updatedAt;

  // end FIELDS (Account)

  static const bool _softDeleteActivated = false;
  AccountManager? __mnAccount;

  AccountManager get _mnAccount {
    return __mnAccount = __mnAccount ?? AccountManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (email != null || !forView) {
      map['email'] = email;
    }
    if (currency != null || !forView) {
      map['currency'] = currency;
    }
    if (createdAt != null) {
      map['createdAt'] = forJson
          ? createdAt!.toString()
          : forQuery
              ? createdAt!.millisecondsSinceEpoch
              : createdAt;
    } else if (createdAt != null || !forView) {
      map['createdAt'] = null;
    }
    if (updatedAt != null) {
      map['updatedAt'] = forJson
          ? updatedAt!.toString()
          : forQuery
              ? updatedAt!.millisecondsSinceEpoch
              : updatedAt;
    } else if (updatedAt != null || !forView) {
      map['updatedAt'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (email != null || !forView) {
      map['email'] = email;
    }
    if (currency != null || !forView) {
      map['currency'] = currency;
    }
    if (createdAt != null) {
      map['createdAt'] = forJson
          ? createdAt!.toString()
          : forQuery
              ? createdAt!.millisecondsSinceEpoch
              : createdAt;
    } else if (createdAt != null || !forView) {
      map['createdAt'] = null;
    }
    if (updatedAt != null) {
      map['updatedAt'] = forJson
          ? updatedAt!.toString()
          : forQuery
              ? updatedAt!.millisecondsSinceEpoch
              : updatedAt;
    } else if (updatedAt != null || !forView) {
      map['updatedAt'] = null;
    }

    return map;
  }

  /// This method returns Json String [Account]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Account]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      name,
      email,
      currency,
      createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
      updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      name,
      email,
      currency,
      createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
      updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
    ];
  }

  static Future<List<Account>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Account.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Account>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Account>[];
    try {
      objList = list
          .map((account) => Account.fromMap(account as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Account.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Account>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Account> objList = <Account>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Account.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Account by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Account] if exist, otherwise returns null
  Future<Account?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Account? obj;
    final data = await _mnAccount.getById([id]);
    if (data.length != 0) {
      obj = Account.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Account) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnAccount.insert(this, ignoreBatch);
    } else {
      await _mnAccount.update(this);
    }

    return id;
  }

  /// Saves the (Account) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnAccount.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnAccount.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Account. Returns a new Primary Key value of Account

  /// <returns>Returns a new Primary Key value of Account
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Account> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Account> accounts) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await ExpenseDBModel().batchStart();
    for (final obj in accounts) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await ExpenseDBModel().batchCommit();
      for (int i = 0; i < accounts.length; i++) {
        if (accounts[i].id == null) {
          accounts[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnAccount.rawInsert(
          'INSERT OR REPLACE INTO account (id, name, email, currency, createdAt, updatedAt)  VALUES (?,?,?,?,?,?)',
          [
            id,
            name,
            email,
            currency,
            createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
            updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Account id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Account id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Account Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Account>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Account> accounts) async {
    final results = await _mnAccount.rawInsertAll(
        'INSERT OR REPLACE INTO account (id, name, email, currency, createdAt, updatedAt)  VALUES (?,?,?,?,?,?)',
        accounts);
    return results;
  }

  /// Deletes Account

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Account invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnAccount
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnAccount.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Account] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  AccountFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return AccountFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  AccountFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return AccountFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    currency = currency ?? 'PHP';
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion account

// region AccountField
class AccountField extends FilterBase {
  AccountField(AccountFilterBuilder accountFB) : super(accountFB);

  @override
  AccountFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder isNull() {
    return super.isNull() as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as AccountFilterBuilder;
  }

  @override
  AccountFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as AccountFilterBuilder;
  }

  @override
  AccountField get not {
    return super.not as AccountField;
  }
}
// endregion AccountField

// region AccountFilterBuilder
class AccountFilterBuilder extends ConjunctionBase {
  AccountFilterBuilder(Account obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnAccount = obj._mnAccount;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  AccountManager? _mnAccount;

  /// put the sql keyword 'AND'
  @override
  AccountFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  AccountFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  AccountFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  AccountFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  AccountFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  AccountFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  AccountFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  AccountFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  AccountFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  AccountFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  AccountFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  AccountField _setField(AccountField? field, String colName, DbType dbtype) {
    return AccountField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  AccountField? _id;
  AccountField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  AccountField? _name;
  AccountField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  AccountField? _email;
  AccountField get email {
    return _email = _setField(_email, 'email', DbType.text);
  }

  AccountField? _currency;
  AccountField get currency {
    return _currency = _setField(_currency, 'currency', DbType.text);
  }

  AccountField? _createdAt;
  AccountField get createdAt {
    return _createdAt = _setField(_createdAt, 'createdAt', DbType.datetime);
  }

  AccountField? _updatedAt;
  AccountField get updatedAt {
    return _updatedAt = _setField(_updatedAt, 'updatedAt', DbType.datetime);
  }

  /// Deletes List<Account> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnAccount!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnAccount!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from account ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnAccount!.updateBatch(qparams, values);
  }

  /// This method always returns [Account] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Account?
  @override
  Future<Account?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnAccount!.toList(qparams);
    final data = await objFuture;
    Account? obj;
    if (data.isNotEmpty) {
      obj = Account.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Account]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Account?
  @override
  Future<Account> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Account();
  }

  /// This method returns int. [Account]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? accountCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final accountsFuture = await _mnAccount!.toList(qparams);
    final int count = accountsFuture[0]['CNT'] as int;
    if (accountCount != null) {
      accountCount(count);
    }
    return count;
  }

  /// This method returns List<Account> [Account]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Account>
  @override
  Future<List<Account>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Account> accountsData = await Account.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return accountsData;
  }

  /// This method returns Json String [Account]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Account]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Account]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnAccount!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Account]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM account WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnAccount!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Account]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnAccount!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Account.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnAccount!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion AccountFilterBuilder

// region AccountFields
class AccountFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fEmail;
  static TableField get email {
    return _fEmail =
        _fEmail ?? SqlSyntax.setField(_fEmail, 'email', DbType.text);
  }

  static TableField? _fCurrency;
  static TableField get currency {
    return _fCurrency =
        _fCurrency ?? SqlSyntax.setField(_fCurrency, 'currency', DbType.text);
  }

  static TableField? _fCreatedAt;
  static TableField get createdAt {
    return _fCreatedAt = _fCreatedAt ??
        SqlSyntax.setField(_fCreatedAt, 'createdAt', DbType.datetime);
  }

  static TableField? _fUpdatedAt;
  static TableField get updatedAt {
    return _fUpdatedAt = _fUpdatedAt ??
        SqlSyntax.setField(_fUpdatedAt, 'updatedAt', DbType.datetime);
  }
}
// endregion AccountFields

//region AccountManager
class AccountManager extends SqfEntityProvider {
  AccountManager()
      : super(ExpenseDBModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'account';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion AccountManager
// region Category
class Category extends TableBase {
  Category(
      {this.id,
      this.name,
      this.icon,
      this.createdAt,
      this.updatedAt,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  Category.withFields(
      this.name, this.icon, this.createdAt, this.updatedAt, this.isDeleted) {
    _setDefaultValues();
  }
  Category.withId(this.id, this.name, this.icon, this.createdAt, this.updatedAt,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Category.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['icon'] != null) {
      icon = o['icon'].toString();
    }
    if (o['createdAt'] != null) {
      createdAt = int.tryParse(o['createdAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['createdAt'].toString())!)
          : DateTime.tryParse(o['createdAt'].toString());
    }
    if (o['updatedAt'] != null) {
      updatedAt = int.tryParse(o['updatedAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['updatedAt'].toString())!)
          : DateTime.tryParse(o['updatedAt'].toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Category)
  int? id;
  String? name;
  String? icon;
  DateTime? createdAt;
  DateTime? updatedAt;
  bool? isDeleted;

  // end FIELDS (Category)

  static const bool _softDeleteActivated = true;
  CategoryManager? __mnCategory;

  CategoryManager get _mnCategory {
    return __mnCategory = __mnCategory ?? CategoryManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (icon != null || !forView) {
      map['icon'] = icon;
    }
    if (createdAt != null) {
      map['createdAt'] = forJson
          ? createdAt!.toString()
          : forQuery
              ? createdAt!.millisecondsSinceEpoch
              : createdAt;
    } else if (createdAt != null || !forView) {
      map['createdAt'] = null;
    }
    if (updatedAt != null) {
      map['updatedAt'] = forJson
          ? updatedAt!.toString()
          : forQuery
              ? updatedAt!.millisecondsSinceEpoch
              : updatedAt;
    } else if (updatedAt != null || !forView) {
      map['updatedAt'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (icon != null || !forView) {
      map['icon'] = icon;
    }
    if (createdAt != null) {
      map['createdAt'] = forJson
          ? createdAt!.toString()
          : forQuery
              ? createdAt!.millisecondsSinceEpoch
              : createdAt;
    } else if (createdAt != null || !forView) {
      map['createdAt'] = null;
    }
    if (updatedAt != null) {
      map['updatedAt'] = forJson
          ? updatedAt!.toString()
          : forQuery
              ? updatedAt!.millisecondsSinceEpoch
              : updatedAt;
    } else if (updatedAt != null || !forView) {
      map['updatedAt'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Category]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Category]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      name,
      icon,
      createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
      updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      name,
      icon,
      createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
      updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  static Future<List<Category>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Category.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Category>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Category>[];
    try {
      objList = list
          .map((category) => Category.fromMap(category as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Category.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Category>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Category> objList = <Category>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Category.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Category by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Category] if exist, otherwise returns null
  Future<Category?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Category? obj;
    final data = await _mnCategory.getById([id]);
    if (data.length != 0) {
      obj = Category.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Category) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnCategory.insert(this, ignoreBatch);
    } else {
      await _mnCategory.update(this);
    }

    return id;
  }

  /// Saves the (Category) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnCategory.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnCategory.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Category. Returns a new Primary Key value of Category

  /// <returns>Returns a new Primary Key value of Category
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Category> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Category> categories) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await ExpenseDBModel().batchStart();
    for (final obj in categories) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await ExpenseDBModel().batchCommit();
      for (int i = 0; i < categories.length; i++) {
        if (categories[i].id == null) {
          categories[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnCategory.rawInsert(
          'INSERT OR REPLACE INTO category (id, name, icon, createdAt, updatedAt,isDeleted)  VALUES (?,?,?,?,?,?)',
          [
            id,
            name,
            icon,
            createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
            updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Category id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Category id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Category Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Category>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Category> categories) async {
    final results = await _mnCategory.rawInsertAll(
        'INSERT OR REPLACE INTO category (id, name, icon, createdAt, updatedAt,isDeleted)  VALUES (?,?,?,?,?,?)',
        categories);
    return results;
  }

  /// Deletes Category

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Category invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnCategory
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnCategory.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Category

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover Category invoked (id=$id)');
    {
      return _mnCategory.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  CategoryFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CategoryFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  CategoryFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CategoryFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion category

// region CategoryField
class CategoryField extends FilterBase {
  CategoryField(CategoryFilterBuilder categoryFB) : super(categoryFB);

  @override
  CategoryFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder isNull() {
    return super.isNull() as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as CategoryFilterBuilder;
  }

  @override
  CategoryField get not {
    return super.not as CategoryField;
  }
}
// endregion CategoryField

// region CategoryFilterBuilder
class CategoryFilterBuilder extends ConjunctionBase {
  CategoryFilterBuilder(Category obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnCategory = obj._mnCategory;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  CategoryManager? _mnCategory;

  /// put the sql keyword 'AND'
  @override
  CategoryFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  CategoryFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  CategoryFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  CategoryFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  CategoryFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  CategoryFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  CategoryFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  CategoryFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  CategoryFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  CategoryFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  CategoryFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  CategoryField _setField(CategoryField? field, String colName, DbType dbtype) {
    return CategoryField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  CategoryField? _id;
  CategoryField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  CategoryField? _name;
  CategoryField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  CategoryField? _icon;
  CategoryField get icon {
    return _icon = _setField(_icon, 'icon', DbType.text);
  }

  CategoryField? _createdAt;
  CategoryField get createdAt {
    return _createdAt = _setField(_createdAt, 'createdAt', DbType.datetime);
  }

  CategoryField? _updatedAt;
  CategoryField get updatedAt {
    return _updatedAt = _setField(_updatedAt, 'updatedAt', DbType.datetime);
  }

  CategoryField? _isDeleted;
  CategoryField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<Category> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnCategory!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnCategory!.delete(qparams);
    }
    return r;
  }

  /// Recover List<Category> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover Category bulk invoked');
    return _mnCategory!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from category ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnCategory!.updateBatch(qparams, values);
  }

  /// This method always returns [Category] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Category?
  @override
  Future<Category?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnCategory!.toList(qparams);
    final data = await objFuture;
    Category? obj;
    if (data.isNotEmpty) {
      obj = Category.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Category]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Category?
  @override
  Future<Category> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Category();
  }

  /// This method returns int. [Category]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? categoryCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final categoriesFuture = await _mnCategory!.toList(qparams);
    final int count = categoriesFuture[0]['CNT'] as int;
    if (categoryCount != null) {
      categoryCount(count);
    }
    return count;
  }

  /// This method returns List<Category> [Category]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Category>
  @override
  Future<List<Category>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Category> categoriesData = await Category.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return categoriesData;
  }

  /// This method returns Json String [Category]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Category]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Category]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnCategory!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Category]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM category WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnCategory!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Category]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnCategory!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Category.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnCategory!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion CategoryFilterBuilder

// region CategoryFields
class CategoryFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fIcon;
  static TableField get icon {
    return _fIcon = _fIcon ?? SqlSyntax.setField(_fIcon, 'icon', DbType.text);
  }

  static TableField? _fCreatedAt;
  static TableField get createdAt {
    return _fCreatedAt = _fCreatedAt ??
        SqlSyntax.setField(_fCreatedAt, 'createdAt', DbType.datetime);
  }

  static TableField? _fUpdatedAt;
  static TableField get updatedAt {
    return _fUpdatedAt = _fUpdatedAt ??
        SqlSyntax.setField(_fUpdatedAt, 'updatedAt', DbType.datetime);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion CategoryFields

//region CategoryManager
class CategoryManager extends SqfEntityProvider {
  CategoryManager()
      : super(ExpenseDBModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'category';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion CategoryManager
// region Expense
class Expense extends TableBase {
  Expense(
      {this.id,
      this.description,
      this.amount,
      this.paid_at,
      this.category_id,
      this.createdAt,
      this.updatedAt}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Expense.withFields(this.description, this.amount, this.paid_at,
      this.category_id, this.createdAt, this.updatedAt) {
    _setDefaultValues();
  }
  Expense.withId(this.id, this.description, this.amount, this.paid_at,
      this.category_id, this.createdAt, this.updatedAt) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Expense.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['description'] != null) {
      description = o['description'].toString();
    }
    if (o['amount'] != null) {
      amount = double.tryParse(o['amount'].toString());
    }
    if (o['paid_at'] != null) {
      paid_at = int.tryParse(o['paid_at'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['paid_at'].toString())!)
          : DateTime.tryParse(o['paid_at'].toString());
    }
    if (o['category_id'] != null) {
      category_id = int.tryParse(o['category_id'].toString());
    }
    if (o['createdAt'] != null) {
      createdAt = int.tryParse(o['createdAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['createdAt'].toString())!)
          : DateTime.tryParse(o['createdAt'].toString());
    }
    if (o['updatedAt'] != null) {
      updatedAt = int.tryParse(o['updatedAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['updatedAt'].toString())!)
          : DateTime.tryParse(o['updatedAt'].toString());
    }
  }
  // FIELDS (Expense)
  int? id;
  String? description;
  double? amount;
  DateTime? paid_at;
  int? category_id;
  DateTime? createdAt;
  DateTime? updatedAt;

  // end FIELDS (Expense)

  static const bool _softDeleteActivated = false;
  ExpenseManager? __mnExpense;

  ExpenseManager get _mnExpense {
    return __mnExpense = __mnExpense ?? ExpenseManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (amount != null || !forView) {
      map['amount'] = amount;
    }
    if (paid_at != null) {
      map['paid_at'] = forJson
          ? '$paid_at!.year-$paid_at!.month-$paid_at!.day'
          : forQuery
              ? DateTime(paid_at!.year, paid_at!.month, paid_at!.day)
                  .millisecondsSinceEpoch
              : paid_at;
    } else if (paid_at != null || !forView) {
      map['paid_at'] = null;
    }
    if (category_id != null || !forView) {
      map['category_id'] = category_id;
    }
    if (createdAt != null) {
      map['createdAt'] = forJson
          ? createdAt!.toString()
          : forQuery
              ? createdAt!.millisecondsSinceEpoch
              : createdAt;
    } else if (createdAt != null || !forView) {
      map['createdAt'] = null;
    }
    if (updatedAt != null) {
      map['updatedAt'] = forJson
          ? updatedAt!.toString()
          : forQuery
              ? updatedAt!.millisecondsSinceEpoch
              : updatedAt;
    } else if (updatedAt != null || !forView) {
      map['updatedAt'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (amount != null || !forView) {
      map['amount'] = amount;
    }
    if (paid_at != null) {
      map['paid_at'] = forJson
          ? '$paid_at!.year-$paid_at!.month-$paid_at!.day'
          : forQuery
              ? DateTime(paid_at!.year, paid_at!.month, paid_at!.day)
                  .millisecondsSinceEpoch
              : paid_at;
    } else if (paid_at != null || !forView) {
      map['paid_at'] = null;
    }
    if (category_id != null || !forView) {
      map['category_id'] = category_id;
    }
    if (createdAt != null) {
      map['createdAt'] = forJson
          ? createdAt!.toString()
          : forQuery
              ? createdAt!.millisecondsSinceEpoch
              : createdAt;
    } else if (createdAt != null || !forView) {
      map['createdAt'] = null;
    }
    if (updatedAt != null) {
      map['updatedAt'] = forJson
          ? updatedAt!.toString()
          : forQuery
              ? updatedAt!.millisecondsSinceEpoch
              : updatedAt;
    } else if (updatedAt != null || !forView) {
      map['updatedAt'] = null;
    }

    return map;
  }

  /// This method returns Json String [Expense]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Expense]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      description,
      amount,
      paid_at != null ? paid_at!.millisecondsSinceEpoch : null,
      category_id,
      createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
      updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      description,
      amount,
      paid_at != null ? paid_at!.millisecondsSinceEpoch : null,
      category_id,
      createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
      updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
    ];
  }

  static Future<List<Expense>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Expense.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Expense>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Expense>[];
    try {
      objList = list
          .map((expense) => Expense.fromMap(expense as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Expense.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Expense>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Expense> objList = <Expense>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Expense.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Expense by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Expense] if exist, otherwise returns null
  Future<Expense?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Expense? obj;
    final data = await _mnExpense.getById([id]);
    if (data.length != 0) {
      obj = Expense.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Expense) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnExpense.insert(this, ignoreBatch);
    } else {
      await _mnExpense.update(this);
    }

    return id;
  }

  /// Saves the (Expense) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnExpense.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnExpense.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Expense. Returns a new Primary Key value of Expense

  /// <returns>Returns a new Primary Key value of Expense
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Expense> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Expense> expenses) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await ExpenseDBModel().batchStart();
    for (final obj in expenses) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await ExpenseDBModel().batchCommit();
      for (int i = 0; i < expenses.length; i++) {
        if (expenses[i].id == null) {
          expenses[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnExpense.rawInsert(
          'INSERT OR REPLACE INTO expense (id, description, amount, paid_at, category_id, createdAt, updatedAt)  VALUES (?,?,?,?,?,?,?)',
          [
            id,
            description,
            amount,
            paid_at != null ? paid_at!.millisecondsSinceEpoch : null,
            category_id,
            createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
            updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Expense id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Expense id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Expense Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Expense>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Expense> expenses) async {
    final results = await _mnExpense.rawInsertAll(
        'INSERT OR REPLACE INTO expense (id, description, amount, paid_at, category_id, createdAt, updatedAt)  VALUES (?,?,?,?,?,?,?)',
        expenses);
    return results;
  }

  /// Deletes Expense

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Expense invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnExpense
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnExpense.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Expense] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  ExpenseFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ExpenseFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  ExpenseFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ExpenseFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    amount = amount ?? 0;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion expense

// region ExpenseField
class ExpenseField extends FilterBase {
  ExpenseField(ExpenseFilterBuilder expenseFB) : super(expenseFB);

  @override
  ExpenseFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as ExpenseFilterBuilder;
  }

  @override
  ExpenseFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as ExpenseFilterBuilder;
  }

  @override
  ExpenseFilterBuilder isNull() {
    return super.isNull() as ExpenseFilterBuilder;
  }

  @override
  ExpenseFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as ExpenseFilterBuilder;
  }

  @override
  ExpenseFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as ExpenseFilterBuilder;
  }

  @override
  ExpenseFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as ExpenseFilterBuilder;
  }

  @override
  ExpenseFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as ExpenseFilterBuilder;
  }

  @override
  ExpenseFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as ExpenseFilterBuilder;
  }

  @override
  ExpenseFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as ExpenseFilterBuilder;
  }

  @override
  ExpenseFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as ExpenseFilterBuilder;
  }

  @override
  ExpenseFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as ExpenseFilterBuilder;
  }

  @override
  ExpenseFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as ExpenseFilterBuilder;
  }

  @override
  ExpenseField get not {
    return super.not as ExpenseField;
  }
}
// endregion ExpenseField

// region ExpenseFilterBuilder
class ExpenseFilterBuilder extends ConjunctionBase {
  ExpenseFilterBuilder(Expense obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnExpense = obj._mnExpense;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  ExpenseManager? _mnExpense;

  /// put the sql keyword 'AND'
  @override
  ExpenseFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  ExpenseFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  ExpenseFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  ExpenseFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  ExpenseFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  ExpenseFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  ExpenseFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ExpenseFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ExpenseFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ExpenseFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ExpenseFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  ExpenseField _setField(ExpenseField? field, String colName, DbType dbtype) {
    return ExpenseField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  ExpenseField? _id;
  ExpenseField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  ExpenseField? _description;
  ExpenseField get description {
    return _description = _setField(_description, 'description', DbType.text);
  }

  ExpenseField? _amount;
  ExpenseField get amount {
    return _amount = _setField(_amount, 'amount', DbType.real);
  }

  ExpenseField? _paid_at;
  ExpenseField get paid_at {
    return _paid_at = _setField(_paid_at, 'paid_at', DbType.date);
  }

  ExpenseField? _category_id;
  ExpenseField get category_id {
    return _category_id =
        _setField(_category_id, 'category_id', DbType.integer);
  }

  ExpenseField? _createdAt;
  ExpenseField get createdAt {
    return _createdAt = _setField(_createdAt, 'createdAt', DbType.datetime);
  }

  ExpenseField? _updatedAt;
  ExpenseField get updatedAt {
    return _updatedAt = _setField(_updatedAt, 'updatedAt', DbType.datetime);
  }

  /// Deletes List<Expense> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnExpense!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnExpense!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from expense ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnExpense!.updateBatch(qparams, values);
  }

  /// This method always returns [Expense] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Expense?
  @override
  Future<Expense?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnExpense!.toList(qparams);
    final data = await objFuture;
    Expense? obj;
    if (data.isNotEmpty) {
      obj = Expense.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Expense]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Expense?
  @override
  Future<Expense> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Expense();
  }

  /// This method returns int. [Expense]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? expenseCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final expensesFuture = await _mnExpense!.toList(qparams);
    final int count = expensesFuture[0]['CNT'] as int;
    if (expenseCount != null) {
      expenseCount(count);
    }
    return count;
  }

  /// This method returns List<Expense> [Expense]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Expense>
  @override
  Future<List<Expense>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Expense> expensesData = await Expense.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return expensesData;
  }

  /// This method returns Json String [Expense]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Expense]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Expense]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnExpense!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Expense]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM expense WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnExpense!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Expense]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnExpense!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Expense.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnExpense!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ExpenseFilterBuilder

// region ExpenseFields
class ExpenseFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField? _fAmount;
  static TableField get amount {
    return _fAmount =
        _fAmount ?? SqlSyntax.setField(_fAmount, 'amount', DbType.real);
  }

  static TableField? _fPaid_at;
  static TableField get paid_at {
    return _fPaid_at =
        _fPaid_at ?? SqlSyntax.setField(_fPaid_at, 'paid_at', DbType.date);
  }

  static TableField? _fCategory_id;
  static TableField get category_id {
    return _fCategory_id = _fCategory_id ??
        SqlSyntax.setField(_fCategory_id, 'category_id', DbType.integer);
  }

  static TableField? _fCreatedAt;
  static TableField get createdAt {
    return _fCreatedAt = _fCreatedAt ??
        SqlSyntax.setField(_fCreatedAt, 'createdAt', DbType.datetime);
  }

  static TableField? _fUpdatedAt;
  static TableField get updatedAt {
    return _fUpdatedAt = _fUpdatedAt ??
        SqlSyntax.setField(_fUpdatedAt, 'updatedAt', DbType.datetime);
  }
}
// endregion ExpenseFields

//region ExpenseManager
class ExpenseManager extends SqfEntityProvider {
  ExpenseManager()
      : super(ExpenseDBModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'expense';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion ExpenseManager
// region Income
class Income extends TableBase {
  Income(
      {this.id,
      this.description,
      this.amount,
      this.date,
      this.createdAt,
      this.updatedAt}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Income.withFields(this.description, this.amount, this.date, this.createdAt,
      this.updatedAt) {
    _setDefaultValues();
  }
  Income.withId(this.id, this.description, this.amount, this.date,
      this.createdAt, this.updatedAt) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Income.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['description'] != null) {
      description = o['description'].toString();
    }
    if (o['amount'] != null) {
      amount = double.tryParse(o['amount'].toString());
    }
    if (o['date'] != null) {
      date = int.tryParse(o['date'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['date'].toString())!)
          : DateTime.tryParse(o['date'].toString());
    }
    if (o['createdAt'] != null) {
      createdAt = int.tryParse(o['createdAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['createdAt'].toString())!)
          : DateTime.tryParse(o['createdAt'].toString());
    }
    if (o['updatedAt'] != null) {
      updatedAt = int.tryParse(o['updatedAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['updatedAt'].toString())!)
          : DateTime.tryParse(o['updatedAt'].toString());
    }
  }
  // FIELDS (Income)
  int? id;
  String? description;
  double? amount;
  DateTime? date;
  DateTime? createdAt;
  DateTime? updatedAt;

  // end FIELDS (Income)

  static const bool _softDeleteActivated = false;
  IncomeManager? __mnIncome;

  IncomeManager get _mnIncome {
    return __mnIncome = __mnIncome ?? IncomeManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (amount != null || !forView) {
      map['amount'] = amount;
    }
    if (date != null) {
      map['date'] = forJson
          ? '$date!.year-$date!.month-$date!.day'
          : forQuery
              ? DateTime(date!.year, date!.month, date!.day)
                  .millisecondsSinceEpoch
              : date;
    } else if (date != null || !forView) {
      map['date'] = null;
    }
    if (createdAt != null) {
      map['createdAt'] = forJson
          ? createdAt!.toString()
          : forQuery
              ? createdAt!.millisecondsSinceEpoch
              : createdAt;
    } else if (createdAt != null || !forView) {
      map['createdAt'] = null;
    }
    if (updatedAt != null) {
      map['updatedAt'] = forJson
          ? updatedAt!.toString()
          : forQuery
              ? updatedAt!.millisecondsSinceEpoch
              : updatedAt;
    } else if (updatedAt != null || !forView) {
      map['updatedAt'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (amount != null || !forView) {
      map['amount'] = amount;
    }
    if (date != null) {
      map['date'] = forJson
          ? '$date!.year-$date!.month-$date!.day'
          : forQuery
              ? DateTime(date!.year, date!.month, date!.day)
                  .millisecondsSinceEpoch
              : date;
    } else if (date != null || !forView) {
      map['date'] = null;
    }
    if (createdAt != null) {
      map['createdAt'] = forJson
          ? createdAt!.toString()
          : forQuery
              ? createdAt!.millisecondsSinceEpoch
              : createdAt;
    } else if (createdAt != null || !forView) {
      map['createdAt'] = null;
    }
    if (updatedAt != null) {
      map['updatedAt'] = forJson
          ? updatedAt!.toString()
          : forQuery
              ? updatedAt!.millisecondsSinceEpoch
              : updatedAt;
    } else if (updatedAt != null || !forView) {
      map['updatedAt'] = null;
    }

    return map;
  }

  /// This method returns Json String [Income]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Income]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      description,
      amount,
      date != null ? date!.millisecondsSinceEpoch : null,
      createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
      updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      description,
      amount,
      date != null ? date!.millisecondsSinceEpoch : null,
      createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
      updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
    ];
  }

  static Future<List<Income>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Income.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Income>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Income>[];
    try {
      objList = list
          .map((income) => Income.fromMap(income as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Income.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Income>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Income> objList = <Income>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Income.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Income by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Income] if exist, otherwise returns null
  Future<Income?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Income? obj;
    final data = await _mnIncome.getById([id]);
    if (data.length != 0) {
      obj = Income.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Income) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnIncome.insert(this, ignoreBatch);
    } else {
      await _mnIncome.update(this);
    }

    return id;
  }

  /// Saves the (Income) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnIncome.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnIncome.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Income. Returns a new Primary Key value of Income

  /// <returns>Returns a new Primary Key value of Income
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Income> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Income> incomes) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await ExpenseDBModel().batchStart();
    for (final obj in incomes) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await ExpenseDBModel().batchCommit();
      for (int i = 0; i < incomes.length; i++) {
        if (incomes[i].id == null) {
          incomes[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnIncome.rawInsert(
          'INSERT OR REPLACE INTO income (id, description, amount, date, createdAt, updatedAt)  VALUES (?,?,?,?,?,?)',
          [
            id,
            description,
            amount,
            date != null ? date!.millisecondsSinceEpoch : null,
            createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
            updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Income id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Income id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Income Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Income>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Income> incomes) async {
    final results = await _mnIncome.rawInsertAll(
        'INSERT OR REPLACE INTO income (id, description, amount, date, createdAt, updatedAt)  VALUES (?,?,?,?,?,?)',
        incomes);
    return results;
  }

  /// Deletes Income

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Income invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnIncome
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnIncome.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Income] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  IncomeFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return IncomeFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  IncomeFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return IncomeFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    amount = amount ?? 0;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion income

// region IncomeField
class IncomeField extends FilterBase {
  IncomeField(IncomeFilterBuilder incomeFB) : super(incomeFB);

  @override
  IncomeFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as IncomeFilterBuilder;
  }

  @override
  IncomeFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as IncomeFilterBuilder;
  }

  @override
  IncomeFilterBuilder isNull() {
    return super.isNull() as IncomeFilterBuilder;
  }

  @override
  IncomeFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as IncomeFilterBuilder;
  }

  @override
  IncomeFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as IncomeFilterBuilder;
  }

  @override
  IncomeFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as IncomeFilterBuilder;
  }

  @override
  IncomeFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as IncomeFilterBuilder;
  }

  @override
  IncomeFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as IncomeFilterBuilder;
  }

  @override
  IncomeFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as IncomeFilterBuilder;
  }

  @override
  IncomeFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as IncomeFilterBuilder;
  }

  @override
  IncomeFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as IncomeFilterBuilder;
  }

  @override
  IncomeFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as IncomeFilterBuilder;
  }

  @override
  IncomeField get not {
    return super.not as IncomeField;
  }
}
// endregion IncomeField

// region IncomeFilterBuilder
class IncomeFilterBuilder extends ConjunctionBase {
  IncomeFilterBuilder(Income obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnIncome = obj._mnIncome;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  IncomeManager? _mnIncome;

  /// put the sql keyword 'AND'
  @override
  IncomeFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  IncomeFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  IncomeFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  IncomeFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  IncomeFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  IncomeFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  IncomeFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  IncomeFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  IncomeFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  IncomeFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  IncomeFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  IncomeField _setField(IncomeField? field, String colName, DbType dbtype) {
    return IncomeField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  IncomeField? _id;
  IncomeField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  IncomeField? _description;
  IncomeField get description {
    return _description = _setField(_description, 'description', DbType.text);
  }

  IncomeField? _amount;
  IncomeField get amount {
    return _amount = _setField(_amount, 'amount', DbType.real);
  }

  IncomeField? _date;
  IncomeField get date {
    return _date = _setField(_date, 'date', DbType.date);
  }

  IncomeField? _createdAt;
  IncomeField get createdAt {
    return _createdAt = _setField(_createdAt, 'createdAt', DbType.datetime);
  }

  IncomeField? _updatedAt;
  IncomeField get updatedAt {
    return _updatedAt = _setField(_updatedAt, 'updatedAt', DbType.datetime);
  }

  /// Deletes List<Income> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnIncome!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnIncome!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from income ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnIncome!.updateBatch(qparams, values);
  }

  /// This method always returns [Income] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Income?
  @override
  Future<Income?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnIncome!.toList(qparams);
    final data = await objFuture;
    Income? obj;
    if (data.isNotEmpty) {
      obj = Income.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Income]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Income?
  @override
  Future<Income> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Income();
  }

  /// This method returns int. [Income]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? incomeCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final incomesFuture = await _mnIncome!.toList(qparams);
    final int count = incomesFuture[0]['CNT'] as int;
    if (incomeCount != null) {
      incomeCount(count);
    }
    return count;
  }

  /// This method returns List<Income> [Income]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Income>
  @override
  Future<List<Income>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Income> incomesData = await Income.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return incomesData;
  }

  /// This method returns Json String [Income]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Income]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Income]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnIncome!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Income]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM income WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnIncome!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Income]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnIncome!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Income.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnIncome!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion IncomeFilterBuilder

// region IncomeFields
class IncomeFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField? _fAmount;
  static TableField get amount {
    return _fAmount =
        _fAmount ?? SqlSyntax.setField(_fAmount, 'amount', DbType.real);
  }

  static TableField? _fDate;
  static TableField get date {
    return _fDate = _fDate ?? SqlSyntax.setField(_fDate, 'date', DbType.date);
  }

  static TableField? _fCreatedAt;
  static TableField get createdAt {
    return _fCreatedAt = _fCreatedAt ??
        SqlSyntax.setField(_fCreatedAt, 'createdAt', DbType.datetime);
  }

  static TableField? _fUpdatedAt;
  static TableField get updatedAt {
    return _fUpdatedAt = _fUpdatedAt ??
        SqlSyntax.setField(_fUpdatedAt, 'updatedAt', DbType.datetime);
  }
}
// endregion IncomeFields

//region IncomeManager
class IncomeManager extends SqfEntityProvider {
  IncomeManager()
      : super(ExpenseDBModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'income';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion IncomeManager
// region Spending_limit
class Spending_limit extends TableBase {
  Spending_limit(
      {this.id,
      this.amount,
      this.start_date,
      this.end_date,
      this.createdAt,
      this.updatedAt}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Spending_limit.withFields(this.amount, this.start_date, this.end_date,
      this.createdAt, this.updatedAt) {
    _setDefaultValues();
  }
  Spending_limit.withId(this.id, this.amount, this.start_date, this.end_date,
      this.createdAt, this.updatedAt) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Spending_limit.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['amount'] != null) {
      amount = double.tryParse(o['amount'].toString());
    }
    if (o['start_date'] != null) {
      start_date = int.tryParse(o['start_date'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['start_date'].toString())!)
          : DateTime.tryParse(o['start_date'].toString());
    }
    if (o['end_date'] != null) {
      end_date = int.tryParse(o['end_date'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['end_date'].toString())!)
          : DateTime.tryParse(o['end_date'].toString());
    }
    if (o['createdAt'] != null) {
      createdAt = int.tryParse(o['createdAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['createdAt'].toString())!)
          : DateTime.tryParse(o['createdAt'].toString());
    }
    if (o['updatedAt'] != null) {
      updatedAt = int.tryParse(o['updatedAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['updatedAt'].toString())!)
          : DateTime.tryParse(o['updatedAt'].toString());
    }
  }
  // FIELDS (Spending_limit)
  int? id;
  double? amount;
  DateTime? start_date;
  DateTime? end_date;
  DateTime? createdAt;
  DateTime? updatedAt;

  // end FIELDS (Spending_limit)

  static const bool _softDeleteActivated = false;
  Spending_limitManager? __mnSpending_limit;

  Spending_limitManager get _mnSpending_limit {
    return __mnSpending_limit = __mnSpending_limit ?? Spending_limitManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (amount != null || !forView) {
      map['amount'] = amount;
    }
    if (start_date != null) {
      map['start_date'] = forJson
          ? '$start_date!.year-$start_date!.month-$start_date!.day'
          : forQuery
              ? DateTime(start_date!.year, start_date!.month, start_date!.day)
                  .millisecondsSinceEpoch
              : start_date;
    } else if (start_date != null || !forView) {
      map['start_date'] = null;
    }
    if (end_date != null) {
      map['end_date'] = forJson
          ? '$end_date!.year-$end_date!.month-$end_date!.day'
          : forQuery
              ? DateTime(end_date!.year, end_date!.month, end_date!.day)
                  .millisecondsSinceEpoch
              : end_date;
    } else if (end_date != null || !forView) {
      map['end_date'] = null;
    }
    if (createdAt != null) {
      map['createdAt'] = forJson
          ? createdAt!.toString()
          : forQuery
              ? createdAt!.millisecondsSinceEpoch
              : createdAt;
    } else if (createdAt != null || !forView) {
      map['createdAt'] = null;
    }
    if (updatedAt != null) {
      map['updatedAt'] = forJson
          ? updatedAt!.toString()
          : forQuery
              ? updatedAt!.millisecondsSinceEpoch
              : updatedAt;
    } else if (updatedAt != null || !forView) {
      map['updatedAt'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (amount != null || !forView) {
      map['amount'] = amount;
    }
    if (start_date != null) {
      map['start_date'] = forJson
          ? '$start_date!.year-$start_date!.month-$start_date!.day'
          : forQuery
              ? DateTime(start_date!.year, start_date!.month, start_date!.day)
                  .millisecondsSinceEpoch
              : start_date;
    } else if (start_date != null || !forView) {
      map['start_date'] = null;
    }
    if (end_date != null) {
      map['end_date'] = forJson
          ? '$end_date!.year-$end_date!.month-$end_date!.day'
          : forQuery
              ? DateTime(end_date!.year, end_date!.month, end_date!.day)
                  .millisecondsSinceEpoch
              : end_date;
    } else if (end_date != null || !forView) {
      map['end_date'] = null;
    }
    if (createdAt != null) {
      map['createdAt'] = forJson
          ? createdAt!.toString()
          : forQuery
              ? createdAt!.millisecondsSinceEpoch
              : createdAt;
    } else if (createdAt != null || !forView) {
      map['createdAt'] = null;
    }
    if (updatedAt != null) {
      map['updatedAt'] = forJson
          ? updatedAt!.toString()
          : forQuery
              ? updatedAt!.millisecondsSinceEpoch
              : updatedAt;
    } else if (updatedAt != null || !forView) {
      map['updatedAt'] = null;
    }

    return map;
  }

  /// This method returns Json String [Spending_limit]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Spending_limit]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      amount,
      start_date != null ? start_date!.millisecondsSinceEpoch : null,
      end_date != null ? end_date!.millisecondsSinceEpoch : null,
      createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
      updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      amount,
      start_date != null ? start_date!.millisecondsSinceEpoch : null,
      end_date != null ? end_date!.millisecondsSinceEpoch : null,
      createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
      updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
    ];
  }

  static Future<List<Spending_limit>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Spending_limit.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Spending_limit>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Spending_limit>[];
    try {
      objList = list
          .map((spending_limit) =>
              Spending_limit.fromMap(spending_limit as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Spending_limit.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Spending_limit>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Spending_limit> objList = <Spending_limit>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Spending_limit.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Spending_limit by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Spending_limit] if exist, otherwise returns null
  Future<Spending_limit?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Spending_limit? obj;
    final data = await _mnSpending_limit.getById([id]);
    if (data.length != 0) {
      obj = Spending_limit.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Spending_limit) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSpending_limit.insert(this, ignoreBatch);
    } else {
      await _mnSpending_limit.update(this);
    }

    return id;
  }

  /// Saves the (Spending_limit) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSpending_limit.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnSpending_limit.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Spending_limit. Returns a new Primary Key value of Spending_limit

  /// <returns>Returns a new Primary Key value of Spending_limit
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Spending_limit> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<Spending_limit> spending_limits) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await ExpenseDBModel().batchStart();
    for (final obj in spending_limits) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await ExpenseDBModel().batchCommit();
      for (int i = 0; i < spending_limits.length; i++) {
        if (spending_limits[i].id == null) {
          spending_limits[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnSpending_limit.rawInsert(
          'INSERT OR REPLACE INTO spending_limit (id, amount, start_date, end_date, createdAt, updatedAt)  VALUES (?,?,?,?,?,?)',
          [
            id,
            amount,
            start_date != null ? start_date!.millisecondsSinceEpoch : null,
            end_date != null ? end_date!.millisecondsSinceEpoch : null,
            createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
            updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Spending_limit id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Spending_limit id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Spending_limit Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Spending_limit>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(
      List<Spending_limit> spending_limits) async {
    final results = await _mnSpending_limit.rawInsertAll(
        'INSERT OR REPLACE INTO spending_limit (id, amount, start_date, end_date, createdAt, updatedAt)  VALUES (?,?,?,?,?,?)',
        spending_limits);
    return results;
  }

  /// Deletes Spending_limit

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Spending_limit invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnSpending_limit
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnSpending_limit.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Spending_limit] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  Spending_limitFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Spending_limitFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  Spending_limitFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Spending_limitFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    amount = amount ?? 0;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion spending_limit

// region Spending_limitField
class Spending_limitField extends FilterBase {
  Spending_limitField(Spending_limitFilterBuilder spending_limitFB)
      : super(spending_limitFB);

  @override
  Spending_limitFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as Spending_limitFilterBuilder;
  }

  @override
  Spending_limitFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as Spending_limitFilterBuilder;
  }

  @override
  Spending_limitFilterBuilder isNull() {
    return super.isNull() as Spending_limitFilterBuilder;
  }

  @override
  Spending_limitFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as Spending_limitFilterBuilder;
  }

  @override
  Spending_limitFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as Spending_limitFilterBuilder;
  }

  @override
  Spending_limitFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as Spending_limitFilterBuilder;
  }

  @override
  Spending_limitFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as Spending_limitFilterBuilder;
  }

  @override
  Spending_limitFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as Spending_limitFilterBuilder;
  }

  @override
  Spending_limitFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as Spending_limitFilterBuilder;
  }

  @override
  Spending_limitFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as Spending_limitFilterBuilder;
  }

  @override
  Spending_limitFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as Spending_limitFilterBuilder;
  }

  @override
  Spending_limitFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as Spending_limitFilterBuilder;
  }

  @override
  Spending_limitField get not {
    return super.not as Spending_limitField;
  }
}
// endregion Spending_limitField

// region Spending_limitFilterBuilder
class Spending_limitFilterBuilder extends ConjunctionBase {
  Spending_limitFilterBuilder(Spending_limit obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnSpending_limit = obj._mnSpending_limit;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  Spending_limitManager? _mnSpending_limit;

  /// put the sql keyword 'AND'
  @override
  Spending_limitFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  Spending_limitFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  Spending_limitFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  Spending_limitFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  Spending_limitFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  Spending_limitFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  Spending_limitFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Spending_limitFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Spending_limitFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Spending_limitFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Spending_limitFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  Spending_limitField _setField(
      Spending_limitField? field, String colName, DbType dbtype) {
    return Spending_limitField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  Spending_limitField? _id;
  Spending_limitField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  Spending_limitField? _amount;
  Spending_limitField get amount {
    return _amount = _setField(_amount, 'amount', DbType.real);
  }

  Spending_limitField? _start_date;
  Spending_limitField get start_date {
    return _start_date = _setField(_start_date, 'start_date', DbType.date);
  }

  Spending_limitField? _end_date;
  Spending_limitField get end_date {
    return _end_date = _setField(_end_date, 'end_date', DbType.date);
  }

  Spending_limitField? _createdAt;
  Spending_limitField get createdAt {
    return _createdAt = _setField(_createdAt, 'createdAt', DbType.datetime);
  }

  Spending_limitField? _updatedAt;
  Spending_limitField get updatedAt {
    return _updatedAt = _setField(_updatedAt, 'updatedAt', DbType.datetime);
  }

  /// Deletes List<Spending_limit> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnSpending_limit!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnSpending_limit!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from spending_limit ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnSpending_limit!.updateBatch(qparams, values);
  }

  /// This method always returns [Spending_limit] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Spending_limit?
  @override
  Future<Spending_limit?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnSpending_limit!.toList(qparams);
    final data = await objFuture;
    Spending_limit? obj;
    if (data.isNotEmpty) {
      obj = Spending_limit.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Spending_limit]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Spending_limit?
  @override
  Future<Spending_limit> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Spending_limit();
  }

  /// This method returns int. [Spending_limit]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? spending_limitCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final spending_limitsFuture = await _mnSpending_limit!.toList(qparams);
    final int count = spending_limitsFuture[0]['CNT'] as int;
    if (spending_limitCount != null) {
      spending_limitCount(count);
    }
    return count;
  }

  /// This method returns List<Spending_limit> [Spending_limit]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Spending_limit>
  @override
  Future<List<Spending_limit>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Spending_limit> spending_limitsData =
        await Spending_limit.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return spending_limitsData;
  }

  /// This method returns Json String [Spending_limit]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Spending_limit]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Spending_limit]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnSpending_limit!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Spending_limit]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM spending_limit WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnSpending_limit!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Spending_limit]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnSpending_limit!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Spending_limit.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnSpending_limit!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Spending_limitFilterBuilder

// region Spending_limitFields
class Spending_limitFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fAmount;
  static TableField get amount {
    return _fAmount =
        _fAmount ?? SqlSyntax.setField(_fAmount, 'amount', DbType.real);
  }

  static TableField? _fStart_date;
  static TableField get start_date {
    return _fStart_date = _fStart_date ??
        SqlSyntax.setField(_fStart_date, 'start_date', DbType.date);
  }

  static TableField? _fEnd_date;
  static TableField get end_date {
    return _fEnd_date =
        _fEnd_date ?? SqlSyntax.setField(_fEnd_date, 'end_date', DbType.date);
  }

  static TableField? _fCreatedAt;
  static TableField get createdAt {
    return _fCreatedAt = _fCreatedAt ??
        SqlSyntax.setField(_fCreatedAt, 'createdAt', DbType.datetime);
  }

  static TableField? _fUpdatedAt;
  static TableField get updatedAt {
    return _fUpdatedAt = _fUpdatedAt ??
        SqlSyntax.setField(_fUpdatedAt, 'updatedAt', DbType.datetime);
  }
}
// endregion Spending_limitFields

//region Spending_limitManager
class Spending_limitManager extends SqfEntityProvider {
  Spending_limitManager()
      : super(ExpenseDBModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'spending_limit';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion Spending_limitManager
// region Transaction
class Transaction extends TableBase {
  Transaction(
      {this.id,
      this.transaction_id,
      this.transaction_type,
      this.createdAt,
      this.updatedAt}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Transaction.withFields(this.transaction_id, this.transaction_type,
      this.createdAt, this.updatedAt) {
    _setDefaultValues();
  }
  Transaction.withId(this.id, this.transaction_id, this.transaction_type,
      this.createdAt, this.updatedAt) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Transaction.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['transaction_id'] != null) {
      transaction_id = int.tryParse(o['transaction_id'].toString());
    }
    if (o['transaction_type'] != null) {
      transaction_type = o['transaction_type'].toString();
    }
    if (o['createdAt'] != null) {
      createdAt = int.tryParse(o['createdAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['createdAt'].toString())!)
          : DateTime.tryParse(o['createdAt'].toString());
    }
    if (o['updatedAt'] != null) {
      updatedAt = int.tryParse(o['updatedAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['updatedAt'].toString())!)
          : DateTime.tryParse(o['updatedAt'].toString());
    }
  }
  // FIELDS (Transaction)
  int? id;
  int? transaction_id;
  String? transaction_type;
  DateTime? createdAt;
  DateTime? updatedAt;

  // end FIELDS (Transaction)

  static const bool _softDeleteActivated = false;
  TransactionManager? __mnTransaction;

  TransactionManager get _mnTransaction {
    return __mnTransaction = __mnTransaction ?? TransactionManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (transaction_id != null || !forView) {
      map['transaction_id'] = transaction_id;
    }
    if (transaction_type != null || !forView) {
      map['transaction_type'] = transaction_type;
    }
    if (createdAt != null) {
      map['createdAt'] = forJson
          ? createdAt!.toString()
          : forQuery
              ? createdAt!.millisecondsSinceEpoch
              : createdAt;
    } else if (createdAt != null || !forView) {
      map['createdAt'] = null;
    }
    if (updatedAt != null) {
      map['updatedAt'] = forJson
          ? updatedAt!.toString()
          : forQuery
              ? updatedAt!.millisecondsSinceEpoch
              : updatedAt;
    } else if (updatedAt != null || !forView) {
      map['updatedAt'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (transaction_id != null || !forView) {
      map['transaction_id'] = transaction_id;
    }
    if (transaction_type != null || !forView) {
      map['transaction_type'] = transaction_type;
    }
    if (createdAt != null) {
      map['createdAt'] = forJson
          ? createdAt!.toString()
          : forQuery
              ? createdAt!.millisecondsSinceEpoch
              : createdAt;
    } else if (createdAt != null || !forView) {
      map['createdAt'] = null;
    }
    if (updatedAt != null) {
      map['updatedAt'] = forJson
          ? updatedAt!.toString()
          : forQuery
              ? updatedAt!.millisecondsSinceEpoch
              : updatedAt;
    } else if (updatedAt != null || !forView) {
      map['updatedAt'] = null;
    }

    return map;
  }

  /// This method returns Json String [Transaction]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Transaction]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      transaction_id,
      transaction_type,
      createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
      updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      transaction_id,
      transaction_type,
      createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
      updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
    ];
  }

  static Future<List<Transaction>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Transaction.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Transaction>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Transaction>[];
    try {
      objList = list
          .map((transaction) =>
              Transaction.fromMap(transaction as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Transaction.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Transaction>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Transaction> objList = <Transaction>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Transaction.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Transaction by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Transaction] if exist, otherwise returns null
  Future<Transaction?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Transaction? obj;
    final data = await _mnTransaction.getById([id]);
    if (data.length != 0) {
      obj = Transaction.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Transaction) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTransaction.insert(this, ignoreBatch);
    } else {
      await _mnTransaction.update(this);
    }

    return id;
  }

  /// Saves the (Transaction) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTransaction.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTransaction.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Transaction. Returns a new Primary Key value of Transaction

  /// <returns>Returns a new Primary Key value of Transaction
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Transaction> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Transaction> transactions) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await ExpenseDBModel().batchStart();
    for (final obj in transactions) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await ExpenseDBModel().batchCommit();
      for (int i = 0; i < transactions.length; i++) {
        if (transactions[i].id == null) {
          transactions[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnTransaction.rawInsert(
          'INSERT OR REPLACE INTO transactions (id, transaction_id, transaction_type, createdAt, updatedAt)  VALUES (?,?,?,?,?)',
          [
            id,
            transaction_id,
            transaction_type,
            createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
            updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Transaction id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Transaction id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Transaction Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Transaction>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Transaction> transactions) async {
    final results = await _mnTransaction.rawInsertAll(
        'INSERT OR REPLACE INTO transactions (id, transaction_id, transaction_type, createdAt, updatedAt)  VALUES (?,?,?,?,?)',
        transactions);
    return results;
  }

  /// Deletes Transaction

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Transaction invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnTransaction
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTransaction.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Transaction] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  TransactionFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TransactionFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  TransactionFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TransactionFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion transaction

// region TransactionField
class TransactionField extends FilterBase {
  TransactionField(TransactionFilterBuilder transactionFB)
      : super(transactionFB);

  @override
  TransactionFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as TransactionFilterBuilder;
  }

  @override
  TransactionFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as TransactionFilterBuilder;
  }

  @override
  TransactionFilterBuilder isNull() {
    return super.isNull() as TransactionFilterBuilder;
  }

  @override
  TransactionFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as TransactionFilterBuilder;
  }

  @override
  TransactionFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as TransactionFilterBuilder;
  }

  @override
  TransactionFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as TransactionFilterBuilder;
  }

  @override
  TransactionFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as TransactionFilterBuilder;
  }

  @override
  TransactionFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as TransactionFilterBuilder;
  }

  @override
  TransactionFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as TransactionFilterBuilder;
  }

  @override
  TransactionFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as TransactionFilterBuilder;
  }

  @override
  TransactionFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as TransactionFilterBuilder;
  }

  @override
  TransactionFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as TransactionFilterBuilder;
  }

  @override
  TransactionField get not {
    return super.not as TransactionField;
  }
}
// endregion TransactionField

// region TransactionFilterBuilder
class TransactionFilterBuilder extends ConjunctionBase {
  TransactionFilterBuilder(Transaction obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnTransaction = obj._mnTransaction;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  TransactionManager? _mnTransaction;

  /// put the sql keyword 'AND'
  @override
  TransactionFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  TransactionFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  TransactionFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  TransactionFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  TransactionFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  TransactionFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  TransactionFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TransactionFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TransactionFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TransactionFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TransactionFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  TransactionField _setField(
      TransactionField? field, String colName, DbType dbtype) {
    return TransactionField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  TransactionField? _id;
  TransactionField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  TransactionField? _transaction_id;
  TransactionField get transaction_id {
    return _transaction_id =
        _setField(_transaction_id, 'transaction_id', DbType.integer);
  }

  TransactionField? _transaction_type;
  TransactionField get transaction_type {
    return _transaction_type =
        _setField(_transaction_type, 'transaction_type', DbType.text);
  }

  TransactionField? _createdAt;
  TransactionField get createdAt {
    return _createdAt = _setField(_createdAt, 'createdAt', DbType.datetime);
  }

  TransactionField? _updatedAt;
  TransactionField get updatedAt {
    return _updatedAt = _setField(_updatedAt, 'updatedAt', DbType.datetime);
  }

  /// Deletes List<Transaction> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnTransaction!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnTransaction!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from transactions ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnTransaction!.updateBatch(qparams, values);
  }

  /// This method always returns [Transaction] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Transaction?
  @override
  Future<Transaction?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnTransaction!.toList(qparams);
    final data = await objFuture;
    Transaction? obj;
    if (data.isNotEmpty) {
      obj = Transaction.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Transaction]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Transaction?
  @override
  Future<Transaction> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Transaction();
  }

  /// This method returns int. [Transaction]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? transactionCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final transactionsFuture = await _mnTransaction!.toList(qparams);
    final int count = transactionsFuture[0]['CNT'] as int;
    if (transactionCount != null) {
      transactionCount(count);
    }
    return count;
  }

  /// This method returns List<Transaction> [Transaction]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Transaction>
  @override
  Future<List<Transaction>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Transaction> transactionsData = await Transaction.fromMapList(
        data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return transactionsData;
  }

  /// This method returns Json String [Transaction]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Transaction]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Transaction]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnTransaction!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Transaction]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM transactions WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnTransaction!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Transaction]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnTransaction!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Transaction.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnTransaction!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TransactionFilterBuilder

// region TransactionFields
class TransactionFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fTransaction_id;
  static TableField get transaction_id {
    return _fTransaction_id = _fTransaction_id ??
        SqlSyntax.setField(_fTransaction_id, 'transaction_id', DbType.integer);
  }

  static TableField? _fTransaction_type;
  static TableField get transaction_type {
    return _fTransaction_type = _fTransaction_type ??
        SqlSyntax.setField(_fTransaction_type, 'transaction_type', DbType.text);
  }

  static TableField? _fCreatedAt;
  static TableField get createdAt {
    return _fCreatedAt = _fCreatedAt ??
        SqlSyntax.setField(_fCreatedAt, 'createdAt', DbType.datetime);
  }

  static TableField? _fUpdatedAt;
  static TableField get updatedAt {
    return _fUpdatedAt = _fUpdatedAt ??
        SqlSyntax.setField(_fUpdatedAt, 'updatedAt', DbType.datetime);
  }
}
// endregion TransactionFields

//region TransactionManager
class TransactionManager extends SqfEntityProvider {
  TransactionManager()
      : super(ExpenseDBModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'transactions';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion TransactionManager
class ExpenseDBModelSequenceManager extends SqfEntityProvider {
  ExpenseDBModelSequenceManager() : super(ExpenseDBModel());
}
// END OF ENTITIES
